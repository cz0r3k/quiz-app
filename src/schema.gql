# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Question {
  id: Int!
  task: String!
}

interface QuestionStudent {
  id: Int!
  task: String!
}

interface QuestionStudentCheck {
  id: Int!
  task: String!
  correct: Boolean!
}

type QuizStudent {
  id: Int!
  name: String!
  questions: [QuestionStudent!]!
}

type QuizStudentCheck {
  id: Int!
  name: String!
  questionsNumber: Int!
  answered: Int!
  correct: Int!
  questions: [QuestionStudentCheck!]!
}

type Quiz {
  id: Int!
  name: String!
  questions: [Question!]!
}

type MultipleCorrectAnswersStudent implements QuestionStudent {
  id: Int!
  task: String!
  answers: [String!]!
  type: String!
}

type MultipleCorrectAnswersStudentCheck implements QuestionStudentCheck {
  id: Int!
  task: String!
  correct: Boolean!
  answers: [String!]!
  studentAnswers: [String!]!
  correctAnswers: [String!]!
}

type MultipleCorrectAnswers implements Question {
  id: Int!
  task: String!
  answers: [String!]!
  correctAnswers: [String!]!
}

type PlainTextAnswerStudent implements QuestionStudent {
  id: Int!
  task: String!
  type: String!
}

type PlainTextAnswerStudentCheck implements QuestionStudentCheck {
  id: Int!
  task: String!
  correct: Boolean!
  studentAnswer: String!
  correctAnswer: String!
}

type PlainTextAnswer implements Question {
  id: Int!
  task: String!
  correctAnswer: String!
}

type SingleCorrectAnswerStudent implements QuestionStudent {
  id: Int!
  task: String!
  answers: [String!]!
  type: String!
}

type SingleCorrectAnswerStudentCheck implements QuestionStudentCheck {
  id: Int!
  task: String!
  correct: Boolean!
  answers: [String!]!
  studentAnswer: String!
  correctAnswer: String!
}

type SingleCorrectAnswer implements Question {
  id: Int!
  task: String!
  answers: [String!]!
  correctAnswer: String!
}

type SortingStudent implements QuestionStudent {
  id: Int!
  task: String!
  answers: [String!]!
  type: String!
}

type SortingStudentCheck implements QuestionStudentCheck {
  id: Int!
  task: String!
  correct: Boolean!
  studentAnswers: [String!]!
  correctAnswers: [String!]!
}

type Sorting implements Question {
  id: Int!
  task: String!
  correctAnswers: [String!]!
}

input PlainTextAnswerInput {
  task: String!
  correctAnswer: String!
}

input SingleCorrectAnswerInput {
  task: String!
  answers: [String!]!
  correctAnswer: String!
}

input MultipleCorrectAnswersInput {
  task: String!
  answers: [String!]!
  correctAnswers: [String!]!
}

input SortingInput {
  task: String!
  correctAnswers: [String!]!
}

type Query {
  quizzes: [Quiz!]!
  quiz(id: Int!): Quiz!
  quizStudent(id: Int!): QuizStudent!
  answer(id: Int!, quiz: QuizStudentInput!): QuizStudentCheck!
}

input QuizStudentInput {
  id: Int!
  questions: [QuestionStudentInput!]!
}

input QuestionStudentInput {
  id: Int!
  answers: [String!]
  answer: String
}

type Mutation {
  addQuiz(input: QuizInput!): Quiz!
  addQuestion(quizId: Int!, question: QuestionConcreteInput!): Quiz!
  addQuestions(quizId: Int!, questions: [QuestionConcreteInput!]!): Quiz!
}

input QuizInput {
  name: String!
  questions: [QuestionInput!]
}

input QuestionInput {
  task: String!
}

input QuestionConcreteInput {
  task: String!
  answers: [String!]
  correctAnswers: [String!]
  answer: String
  correctAnswer: String
}